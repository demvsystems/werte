<?php
namespace Demv\Werte\Tests\Person\Beziehung;

/**
 * Created by PhpStorm.
 * User: alex
 * Date: 09.01.17
 * Time: 11:32
 */
use Demv\Werte\Person\Beziehung\Beruflich\Arbeitgeber;
use Demv\Werte\Person\Beziehung\Beruflich\Arbeitnehmer;
use Demv\Werte\Person\Beziehung\Beruflich\FirmaVon;
use Demv\Werte\Person\Beziehung\Beruflich\Geschaeftsfuehrer;
use Demv\Werte\Person\Beziehung\Beziehungstypen;
use Demv\Werte\Person\Beziehung\Familiaer\Eltern;
use Demv\Werte\Person\Beziehung\Familiaer\Enkel;
use Demv\Werte\Person\Beziehung\Familiaer\Grosseltern;
use Demv\Werte\Person\Beziehung\Familiaer\Kind;
use Demv\Werte\Person\Beziehung\Familiaer\Partner;
use Demv\Werte\Person\Beziehung\Familiaer\Schwager;
use Demv\Werte\Tests\ProviderTestTrait;
use PHPUnit_Framework_TestCase;

class BeziehungstypenTest extends PHPUnit_Framework_TestCase
{
    use ProviderTestTrait;

    /**
     * @return Beziehungstypen
     */
    private function getBeziehungstypen()
    {
        return new Beziehungstypen();
    }

    public function testGetAll()
    {
        $provider = $this->getBeziehungstypen();
        $this->assertEquals(11, count($provider->getAll()));
    }

    public function testEntries()
    {
        $provider = $this->getBeziehungstypen();
        $this->checkGetOne($provider, Partner::ID);
        $this->checkGetOne($provider, Eltern::ID);
        $this->checkGetOne($provider, Kind::ID);
        $this->checkGetOne($provider, Grosseltern::ID);
        $this->checkGetOne($provider, Enkel::ID);
        $this->checkGetOne($provider, Schwager::ID);
        $this->checkGetOne($provider, Geschaeftsfuehrer::ID);
        $this->checkGetOne($provider, FirmaVon::ID);
        $this->checkGetOne($provider, Arbeitgeber::ID);
        $this->checkGetOne($provider, Arbeitnehmer::ID);
    }

}