<?php

namespace Demv\Werte\Tests\Person\Beziehung;

use Demv\Werte\Person\Beziehung\Beruflich\Angehoeriger;
use Demv\Werte\Person\Beziehung\Beruflich\Arbeitgeber;
use Demv\Werte\Person\Beziehung\Beruflich\Arbeitnehmer;
use Demv\Werte\Person\Beziehung\Beruflich\Aufsichtsrat;
use Demv\Werte\Person\Beziehung\Beruflich\Berufsbetreuer;
use Demv\Werte\Person\Beziehung\Beruflich\Betreuter;
use Demv\Werte\Person\Beziehung\Beruflich\ExArbeitgeber;
use Demv\Werte\Person\Beziehung\Beruflich\ExArbeitnehmer;
use Demv\Werte\Person\Beziehung\Beruflich\FirmaAufsichtsrat;
use Demv\Werte\Person\Beziehung\Beruflich\FirmaVon;
use Demv\Werte\Person\Beziehung\Beruflich\FirmaVonInhaber;
use Demv\Werte\Person\Beziehung\Beruflich\FirmaVorstand;
use Demv\Werte\Person\Beziehung\Beruflich\Geschaeftsfuehrer;
use Demv\Werte\Person\Beziehung\Beruflich\Geschaeftspartner;
use Demv\Werte\Person\Beziehung\Beruflich\Hauptgeschaeftsstelle;
use Demv\Werte\Person\Beziehung\Beruflich\Inhaber;
use Demv\Werte\Person\Beziehung\Beruflich\InhaberGeschaeftsfuehrer;
use Demv\Werte\Person\Beziehung\Beruflich\KommanditgesellschaftKommanditist;
use Demv\Werte\Person\Beziehung\Beruflich\KommanditgesellschaftKomplementaer;
use Demv\Werte\Person\Beziehung\Beruflich\Kommanditist;
use Demv\Werte\Person\Beziehung\Beruflich\Komplementaer;
use Demv\Werte\Person\Beziehung\Beruflich\VorstandVonFirma;
use Demv\Werte\Person\Beziehung\Beruflich\Zweigstelle;
use Demv\Werte\Person\Beziehung\Beziehungstypen;
use Demv\Werte\Person\Beziehung\Familiaer\CousinCousine;
use Demv\Werte\Person\Beziehung\Familiaer\Eltern;
use Demv\Werte\Person\Beziehung\Familiaer\Enkel;
use Demv\Werte\Person\Beziehung\Familiaer\ExPartner;
use Demv\Werte\Person\Beziehung\Familiaer\Grosseltern;
use Demv\Werte\Person\Beziehung\Familiaer\Kind;
use Demv\Werte\Person\Beziehung\Familiaer\NeffeNichte;
use Demv\Werte\Person\Beziehung\Familiaer\OnkelTante;
use Demv\Werte\Person\Beziehung\Familiaer\Partner;
use Demv\Werte\Person\Beziehung\Familiaer\Patenkind;
use Demv\Werte\Person\Beziehung\Familiaer\PatenOnkelTante;
use Demv\Werte\Person\Beziehung\Familiaer\Schwager;
use Demv\Werte\Person\Beziehung\Familiaer\Schwiegereltern;
use Demv\Werte\Person\Beziehung\Familiaer\Schwiegerkind;
use Demv\Werte\Person\Beziehung\Privat\Eigentuemergemeinschaft;
use Demv\Werte\Person\Beziehung\Privat\FreundBekannter;
use Demv\Werte\Person\Beziehung\Privat\Mitbewohner;
use Demv\Werte\Person\Beziehung\Privat\MitgliedInEigentuemergemeinschaft;
use Demv\Werte\Person\Beziehung\Privat\Verein;
use Demv\Werte\Person\Beziehung\Privat\VorstandVonVerein;
use Demv\Werte\Tests\ProviderTestTrait;
use PHPUnit\Framework\TestCase;

class BeziehungstypenTest extends TestCase
{
    use ProviderTestTrait;

    /**
     * @return Beziehungstypen
     */
    private function getBeziehungstypen(): Beziehungstypen
    {
        return new Beziehungstypen();
    }

    public function testGetAll(): void
    {
        $provider = $this->getBeziehungstypen();
        $this->assertEquals(54, count($provider->getAll()));
    }

    public function testEntries(): void
    {
        $provider = $this->getBeziehungstypen();
        $this->checkGetOne($provider, Partner::class);
        $this->checkGetOne($provider, Eltern::class);
        $this->checkGetOne($provider, Kind::class);
        $this->checkGetOne($provider, Grosseltern::class);
        $this->checkGetOne($provider, Enkel::class);
        $this->checkGetOne($provider, Schwager::class);
        $this->checkGetOne($provider, Geschaeftsfuehrer::class);
        $this->checkGetOne($provider, FirmaVon::class);
        $this->checkGetOne($provider, Arbeitgeber::class);
        $this->checkGetOne($provider, Arbeitnehmer::class);
        $this->checkGetOne($provider, Inhaber::class);
        $this->checkGetOne($provider, FirmaVonInhaber::class);
        $this->checkGetOne($provider, OnkelTante::class);
        $this->checkGetOne($provider, NeffeNichte::class);
        $this->checkGetOne($provider, Schwiegerkind::class);
        $this->checkGetOne($provider, Schwiegereltern::class);
        $this->checkGetOne($provider, FreundBekannter::class);
        $this->checkGetOne($provider, ExPartner::class);
        $this->checkGetOne($provider, Eigentuemergemeinschaft::class);
        $this->checkGetOne($provider, MitgliedInEigentuemergemeinschaft::class);
        $this->checkGetOne($provider, ExArbeitgeber::class);
        $this->checkGetOne($provider, ExArbeitnehmer::class);
        $this->checkGetOne($provider, Geschaeftspartner::class);
        $this->checkGetOne($provider, Hauptgeschaeftsstelle::class);
        $this->checkGetOne($provider, Zweigstelle::class);
        $this->checkGetOne($provider, PatenOnkelTante::class);
        $this->checkGetOne($provider, Patenkind::class);
        $this->checkGetOne($provider, Mitbewohner::class);
        $this->checkGetOne($provider, Betreuter::class);
        $this->checkGetOne($provider, Berufsbetreuer::class);
        $this->checkGetOne($provider, Verein::class);
        $this->checkGetOne($provider, VorstandVonVerein::class);
        $this->checkGetOne($provider, Angehoeriger::class);
        $this->checkGetOne($provider, Aufsichtsrat::class);
        $this->checkGetOne($provider, CousinCousine::class);
        $this->checkGetOne($provider, FirmaAufsichtsrat::class);
        $this->checkGetOne($provider, FirmaVorstand::class);
        $this->checkGetOne($provider, InhaberGeschaeftsfuehrer::class);
        $this->checkGetOne($provider, Kommanditist::class);
        $this->checkGetOne($provider, KommanditgesellschaftKommanditist::class);
        $this->checkGetOne($provider, Komplementaer::class);
        $this->checkGetOne($provider, KommanditgesellschaftKomplementaer::class);
        $this->checkGetOne($provider, VorstandVonFirma::class);
    }
}
